package com.walker.bruteforce;

import java.util.concurrent.CopyOnWriteArrayList;

public class BruteForcer {
	
	private long programStartTime;
	
	private CopyOnWriteArrayList<CopyOnWriteArrayList<WorkerThread>> workerThreads = new CopyOnWriteArrayList<CopyOnWriteArrayList<WorkerThread>>();
	
	private BruteForcerResult result = null;
	
	public BruteForcer(int minLength, int maxLength, String charset, PasswordChecker checker){
		this.workerThreads = new CopyOnWriteArrayList<CopyOnWriteArrayList<WorkerThread>>();
		
		for(int i = minLength; i <= maxLength; i++){
			try {
				workerThreads.add(generateThreads(i, charset.toCharArray(), checker, new ResultRunnable(){
					@Override
					public void finish(char[] generator) {
						long finishTime = System.currentTimeMillis();
						long totalAttempts = 0;
						for(CopyOnWriteArrayList<WorkerThread> subThreads : workerThreads){
							for(WorkerThread thread : subThreads)
								totalAttempts += thread.finish();
						}
						result = new BruteForcerResult(new String(generator), totalAttempts, finishTime - programStartTime);
					}
					
				}));
			} catch (CloneNotSupportedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
	}
	
	public BruteForcerResult run() throws InterruptedException{
		programStartTime = System.currentTimeMillis();
		
		for(CopyOnWriteArrayList<WorkerThread> subThreads : workerThreads){
			for(WorkerThread thread : subThreads)
				thread.start();
			subThreads.get(0).join();
		}
		
		while(result == null);
		return result;
	}
	
	/*
	 * Generates a layer of {@link WorkerThread}s.
	 * 
	 * @param layer The number of the layer. Used as the length of passwords generated by the layer.
	 * @return The finished layer in {@link CopyOnWriteArrayList} form.
	 */
	public CopyOnWriteArrayList<WorkerThread> generateThreads(int layer, char[] charset, PasswordChecker checker, ResultRunnable result) throws CloneNotSupportedException{
		CopyOnWriteArrayList<WorkerThread> ret = new CopyOnWriteArrayList<WorkerThread>();
		for(char rainbowChar : charset)
			ret.add(new WorkerThread(rainbowChar, new char[layer], charset, (PasswordChecker)checker.clone(), result));
		return ret;
	}
	
}
